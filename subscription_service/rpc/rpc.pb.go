// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Subscription
	Id
	Response
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscription struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type   uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Tag    string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
	PollMs uint32 `protobuf:"varint,6,opt,name=poll_ms,json=pollMs" json:"poll_ms,omitempty"`
	Status uint32 `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	SubscriptionId uint64 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Subscription)(nil), "Subscription")
	proto.RegisterType((*Id)(nil), "Id")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SubscriptionService service

type SubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Response, error)
	ResumeSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	StopSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	UpdateSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	Unsubscribe(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type subscriptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionServiceClient(cc *grpc.ClientConn) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SubscriptionService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ResumeSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SubscriptionService/ResumeSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) StopSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SubscriptionService/StopSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdateSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SubscriptionService/UpdateSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Unsubscribe(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SubscriptionService/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscriptionService service

type SubscriptionServiceServer interface {
	Subscribe(context.Context, *Subscription) (*Response, error)
	ResumeSubscription(context.Context, *Id) (*Response, error)
	StopSubscription(context.Context, *Id) (*Response, error)
	UpdateSubscription(context.Context, *Id) (*Response, error)
	Unsubscribe(context.Context, *Id) (*Response, error)
}

func RegisterSubscriptionServiceServer(s *grpc.Server, srv SubscriptionServiceServer) {
	s.RegisterService(&_SubscriptionService_serviceDesc, srv)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ResumeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ResumeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/ResumeSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ResumeSubscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_StopSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).StopSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/StopSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).StopSubscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdateSubscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "ResumeSubscription",
			Handler:    _SubscriptionService_ResumeSubscription_Handler,
		},
		{
			MethodName: "StopSubscription",
			Handler:    _SubscriptionService_StopSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _SubscriptionService_UpdateSubscription_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscriptionService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x6e, 0xf2, 0x30,
	0x10, 0xc7, 0xbf, 0x04, 0x08, 0xe4, 0xbe, 0x42, 0xd1, 0xb5, 0x6a, 0xad, 0x2e, 0x45, 0x51, 0x05,
	0x2c, 0xcd, 0xd0, 0x6e, 0x7d, 0x83, 0x0c, 0x5d, 0x8c, 0x98, 0x51, 0x88, 0x2d, 0x64, 0x09, 0xb0,
	0xe5, 0xb3, 0x2b, 0xf5, 0x6d, 0xfa, 0x52, 0x7d, 0x9f, 0x2a, 0x4e, 0xa8, 0x82, 0x3a, 0xb0, 0xdd,
	0xff, 0xa7, 0x9f, 0xcf, 0xe7, 0x33, 0xa4, 0xd6, 0x54, 0xb9, 0xb1, 0xda, 0xe9, 0xec, 0x2b, 0x82,
	0xab, 0x95, 0xdf, 0x52, 0x65, 0x95, 0x71, 0x4a, 0x1f, 0x71, 0x02, 0xb1, 0x12, 0x2c, 0x9a, 0x45,
	0xcb, 0x94, 0xc7, 0x4a, 0xe0, 0x3d, 0x0c, 0x3d, 0x49, 0xbb, 0x51, 0x82, 0xc5, 0x01, 0x26, 0x75,
	0x2c, 0x04, 0x22, 0xf4, 0xdd, 0xa7, 0x91, 0xac, 0x37, 0x8b, 0x96, 0x63, 0x1e, 0x6a, 0x9c, 0x42,
	0xcf, 0xdb, 0x3d, 0xeb, 0x07, 0xb1, 0x2e, 0x6b, 0xe2, 0xca, 0x1d, 0x1b, 0x34, 0xc4, 0x95, 0xbb,
	0xba, 0xa1, 0xd1, 0xfb, 0xfd, 0xe6, 0x40, 0x2c, 0x09, 0x47, 0x93, 0x3a, 0xbe, 0x13, 0xde, 0x41,
	0x42, 0xae, 0x74, 0x9e, 0xd8, 0xb0, 0xe1, 0x4d, 0xca, 0x9e, 0x21, 0x2e, 0x04, 0x2e, 0xe0, 0x9a,
	0x3a, 0x73, 0x6e, 0xda, 0x21, 0xfb, 0x7c, 0xd2, 0xc5, 0x85, 0xc8, 0xde, 0x60, 0xc4, 0x25, 0x19,
	0x7d, 0x24, 0x89, 0x0c, 0x86, 0xe4, 0xab, 0x4a, 0x12, 0x05, 0x79, 0xc4, 0x4f, 0x11, 0x6f, 0x61,
	0x20, 0xad, 0xd5, 0xb6, 0x7d, 0x54, 0x13, 0x5e, 0xbe, 0x23, 0xb8, 0xe9, 0x6e, 0x63, 0x25, 0xed,
	0x87, 0xaa, 0x24, 0x2e, 0x20, 0x6d, 0xf1, 0x56, 0xe2, 0x38, 0xef, 0x2a, 0x0f, 0x69, 0x7e, 0xba,
	0x2e, 0xfb, 0x87, 0x73, 0x40, 0x2e, 0xc9, 0x1f, 0xe4, 0xd9, 0x4e, 0x7b, 0x79, 0x21, 0xce, 0xbd,
	0x27, 0x98, 0xae, 0x9c, 0x36, 0x17, 0xac, 0x39, 0xe0, 0xda, 0x88, 0xd2, 0x5d, 0xea, 0xf6, 0x08,
	0xff, 0xd7, 0x47, 0xfa, 0x1d, 0xf0, 0x8f, 0xb0, 0x4d, 0xc2, 0x67, 0xbf, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x2c, 0x3c, 0x8b, 0x39, 0xf9, 0x01, 0x00, 0x00,
}
